print("=== scopes ===");
{
  let a = "outer";
  {
    print(a);
    let a = "inner";
    print(a);
  }
  print(a);
}

print("=== if, else ===");
let x = 1;
if x == 1 {
  print("x is 1");
} else {
  print("x is not 1");
}

let y = 0;
if y == 0 {
  print("y is 0");
}

print("=== or, and ===");
print("hi" or 2);
print(nil or "yes");
print(nil or nil or "yes yes"); 
print(nil and "never");

print("=== while: fibonnaci ===");
let a = 0;
let b = 1;
let temp;

while a < 100 {
  temp = a + b;
  a = b;
  b = temp;
  print(a);
}

print("=== sugar: a < b < c ===");
print("=== sugar: a <= b <= c ===");
let a = 0;
let b = 1;
let c = 2;
let d = 3;

if a < b < c < d {
  print("a < b < c < d");
}

if d < b < c < a {
  print("FAIL: d < b < c < a");
}

if a <= b <= c <= c {
  print("a <= b <= c <= c");
}

print("=== functions ===");
fn add_one(n) {
  let a = n + 1;
  print(a);
}
add_one(-1);

fn count(n) {
  if 1 < n {
    count(n - 1);
  }
  print(n);
}
count(3);

fn sum(a, b, c) {
  print(a + b + c);
}
sum(1, 2, 3);

print("=== native function: print ===");
print("Hi.");

print("=== native function: clock ===");
print(clock());

print("=== function return ===");
fn fib(n) {
  if n <= 1 {
    return n;
  }
  return fib(n - 2) + fib(n - 1);
}
print(fib(7));

print("=== function closure ===");
fn make_counter() {
  let i = 0;
  fn count() {
    i = i + 1;
    print(i);
  }

  return count;
}

let counter = make_counter();
counter(); // 1
counter(); // 2

let counter_again = make_counter();
counter_again(); // 1
counter_again(); // 2